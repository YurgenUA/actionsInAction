name: Cut off release (main->release/X.X.X)

on:
  workflow_dispatch:

jobs:
  invoke:
    runs-on: ubuntu-latest
    steps:
    - name: Examine branch
      run: |
        myBranch=$GITHUB_REF_NAME
        if [ $myBranch != "main" ];
        then
          echo "Can only run on 'main' branch"
          exit 1
        fi
        echo "Branch check passed"
        exit 0

    - name: Checkout code
      uses: actions/checkout@v3
      with:
        ref: main

    - uses: fregante/setup-git-user@v1

    - name: Use Node.js 16.x
      uses: actions/setup-node@v3
      with:
        node-version: 16.x
    - run: |
        npm version minor
        echo "DESIRED_VERSION=npm run env | grep npm_package_version | cut -d '=' -f 2" >> $GITHUB_ENV
        echo "desired:$DESIRED_VERSION"
    #  npm run env | grep npm_package_version | cut -d '=' -f 2

    # - name: Extract version
    #   id: extract_version
    #   uses: Saionaro/extract-package-version@v1.0.6

    # - name: Print original version
    #   run: echo ${{ steps.extract_version.outputs.version }}

    # - name: Bump release version
    #   id: bump_version
    #   uses: christian-draeger/increment-semantic-version@1.0.2
    #   with:
    #     current-version: ${{ steps.extract_version.outputs.version }}
    #     version-fragment: 'feature'
    
    # - name: Switch to new branch if it's not exist yet
    #   id: new_branch
    #   env:
    #     DESIRED_BRANCH: release/${{ steps.bump_version.outputs.next-version }}
    #   run: |
    #     echo ${{ steps.bump_version.outputs.next-version }}
    #     existInRemote=$(git ls-remote --heads origin $DESIRED_BRANCH)
    #     if [[ -z ${existInRemote} ]]; then
    #         echo "Branch '$DESIRED_BRANCH' not exists yet"
    #     else
    #         echo "Branch '$DESIRED_BRANCH' already exists. PLease remove it and restart workflow"
    #         exit 1
    #     fi
    #     git checkout -b $DESIRED_BRANCH
    #     echo "DESIRED_BRANCH=$DESIRED_BRANCH" >> $GITHUB_ENV        
    
    # - name: Update version in package.json
    #   uses: jossef/action-set-json-field@v2
    #   with:
    #     file: package.json
    #     field: version
    #     value: ${{ steps.bump_version.outputs.next-version }}

    # - name: Commit to local git branch
    #   run: |
    #     git add --all
    #     git commit -m "bump version to '${{ steps.bump_version.outputs.next-version }}'"
    #     git push --set-upstream origin $DESIRED_BRANCH
